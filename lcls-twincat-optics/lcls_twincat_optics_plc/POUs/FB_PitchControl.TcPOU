<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PitchControl" Id="{143b5005-3e50-4e14-8a6a-21db919333f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PitchControl
VAR_IN_OUT
    Pitch : HOMS_PitchMechanism;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	q_bError : BOOL;
	q_bDone : BOOL;
	q_bBusy : BOOL;
END_VAR
VAR
	// Logging
	stDiag : ST_fbDiagnostics;
	fbFormatString : FB_FormatString;
	{attribute 'instance-path'}
	{attribute 'no_init'}
	POUName : STRING; // Name of the POU for logging/error reporting

	// Stepper Motion
    lrActPos : LREAL; // Actual Position of piezo mechanism
	lrPrevStepperPos : LREAL; // Previous successfully achieved stepper position
	ftLimitSwitch : F_TRIG;
	lrOriginalPosRequest : LREAL;
	lrLastSetpoint : LREAL;
	lrCurrentSetpoint : LREAL;
	fbMotionRequest : FB_MotionRequest;
	fbMotionStage : FB_MotionStage;
	bLimitHit : BOOL;
	tonStepperHold : TON := (PT:=T#100MS); // Timer to hold stepper position while the system relaxes
	rSettledRange : REAL := 0.0003; // Not sure what the units are here...
	bResetStepper : BOOL;
	bExecuteStepper : BOOL;
	enumMotionRequest : ENUM_MotionRequest := ENUM_MotionRequest.WAIT; // Check on this - guessing it means to wait for move to complete before requesting another
	ftLimStandStill : F_TRIG;
	
	// Piezo
	tonPiezoSettled : TON := (PT:=T#2S);
	fbPiezoControl : FB_PiezoControl;
	rtPiezoMoveDone : R_TRIG;

	// State Machine
	PC_State : E_PitchControl := PCM_Init;
	bFirstPass : BOOL := TRUE; // Set to FALSE after first pass, used for initialization
	bCoarse50PiezoMove : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* HOMS Pitch Control
A. Wallace
J. Sheppard - Updating to new lcls-twincat-motion API

The HOMS Pitch mechanism consists of a stepper and piezo that work together to adjust
the pitch of the mirror assembly.

Pitch control state machine

If the target position is beyond the range of the piezo mechanism,
execute a coarse pitch move with the stepper. 
The target of the coarse move shall be set to the requested position. 
Once coarse motion has completed the coarse motion drive position 
correction output shall be set to zero.

Fine pitch motion with the piezo will be initiated to finish closing the loop.

The piezo mechanism can actuate ~ 180urad or 90um.

*)
lrCurrentSetpoint := Pitch.Stepper.fPosition; // Current setpoint, written from Epics
lrActPos := Pitch.Stepper.stAxisStatus.fActPosition;

IF bFirstPass THEN
	// Set setpoint to current motor position
	Pitch.Stepper.fPosition := lrActPos;
END_IF

// If we hit a limit during a move, we need to change the setpoint
ftLimitSwitch(CLK:=Pitch.Stepper.bAllForwardEnable AND Pitch.Stepper.bAllBackwardEnable);
IF ftLimitSwitch.Q THEN
	bExecuteStepper := FALSE;
	bLimitHit := TRUE;
	PC_State := PCM_Standby;
END_IF

ftLimStandStill(CLK:=(NOT Pitch.Stepper.bAllForwardEnable OR NOT Pitch.Stepper.bAllBackwardEnable) AND (Pitch.Stepper.Axis.Status.MotionState = MC_AXISSTATE_STANDSTILL));
IF ftLimStandStill.Q THEN
	// Not a good way of doing things - can't move off limit switch as setpoint will stick at limit switch position
	Pitch.Stepper.fPosition := lrActPos;
	lrCurrentSetpoint := Pitch.Stepper.fPosition;
	lrLastSetpoint := lrCurrentSetpoint;
	lrPrevStepperPos := lrCurrentSetpoint;
END_IF

// Left out Manual Mode Switch and Tweak FBs

// State Machine
CASE PC_State OF
	PCM_Init:
		// Reset the stepper
		bResetStepper := bFirstPass; // True on first cycle
		PC_State := PCM_Standby;
	PCM_Standby:
	    bResetStepper := bFirstPass; // Should now be FALSE
		// Waits for move requests and determines if they are valid
		IF (lrLastSetpoint <> lrCurrentSetpoint) THEN // lrLastSetpoint initially set in PCM_Done
			// Check for bad setpoints -> revert to previous setpoint
			IF 	(lrCurrentSetpoint > Pitch.ReqPosLimHi) OR (lrCurrentSetpoint < Pitch.ReqPosLimLo) OR NOT Pitch.Stepper.bHardwareEnable THEN
				// Outside range of limit switches or bHardwareEnable is FALSE
				ACT_ResetSetpoint();
			ELSIF lrCurrentSetpoint > lrLastSetpoint AND NOT Pitch.Stepper.bAllForwardEnable THEN
				// Forward move when on HL
				ACT_ResetSetpoint();
			ELSIF lrCurrentSetpoint < lrLastSetpoint AND NOT Pitch.Stepper.bAllBackwardEnable THEN
				// Backward move when on LL
				ACT_ResetSetpoint();
			END_IF
			// If the current setpoint still differs from the prvious, we know the move is safe and OK to proceed
			IF lrLastSetpoint <> lrCurrentSetpoint THEN
				q_bDone := FALSE;
				PC_State := PCM_MoveRequested;
			END_IF
		END_IF
	PCM_MoveRequested:
		// A move has been requested, is it within range of the piezo?
		IF WithinRange(ValA:=lrCurrentSetpoint, Center:=lrPrevStepperPos, Range:=GVL_Constants.cPiezoRange, Offset:=0) THEN
			// Move is within the nominal range of the piezo
			fbFormatString.sFormat := 'Within range, fine move %f';
			fbFormatString.arg1 := F_LREAL(lrCurrentSetpoint);
			fbFormatString(sOut=>stDiag.asResults[stDiag.resultIdx.IncVal()]);
			PC_State := PCM_FineMove;
		ELSE
			// Out of range, head to coarse move
			fbFormatString.arg1 := F_LREAL(lrCurrentSetpoint);
			fbFormatString.sFormat := 'OoR, using stepper %f';
			fbFormatString(sOut=>stDiag.asResults[stDiag.resultIdx.IncVal()]);
			PC_State := PCM_Coarse50Piezo;
		END_IF
	PCM_Coarse50Piezo:
		// A coarse move uses the stepper to do a best-effort position
		// First set the piezo to nominal 50% extension using idle mode
		//////////////////////////////////////////////////////////////////////////////
		Pitch.Piezo.xIdleMode := TRUE;
		// Indicate we are doing the coarse 50% piezo move	
		bCoarse50PiezoMove := TRUE;
		// Wait for piezo to settle
		tonPiezoSettled.IN := TRUE;
		bCoarse50PiezoMove R= tonPiezoSettled.Q;
		IF tonPiezoSettled.Q THEN
			//Piezo has moved to 50% position, finish with the stepper
			PC_State := PCM_CoarseMove;
			tonPiezoSettled.IN := FALSE;
		END_IF
	PCM_CoarseMove: 
		// With the piezo at a nominal 50% extension, move the stepper to requested position
		bExecuteStepper := TRUE;
		// Timer that waits to start until stepper is within range of the setpoint
		tonStepperHold.IN := WithinRange(ValA:=LREAL_TO_REAL(lrActPos), Center:=lrCurrentSetpoint, Range:=rSettledRange, Offset:=0);
		tonStepperHold(); // call this here to reset Q just below on first cycle
		// If the coarse move is complete, finish position correction with the piezo
		IF tonStepperHold.Q  OR ftLimitSwitch.Q THEN
			PC_State := PCM_CoarseMoveCleanup;
			lrPrevStepperPos := lrActPos;
		ELSIF Pitch.Stepper.bError THEN
			bExecuteStepper := FALSE;
			PC_State := PCM_StepperError;
			// Left out logging
		END_IF
	PCM_CoarseMoveCleanup:
		bExecuteStepper := FALSE;
		PC_State := PCM_FineMove;
	PCM_FineMove:	
		Pitch.Piezo.xIdleMode := FALSE;
		fbPiezoControl.xExecute := TRUE;
		IF bLimitHit THEN
			Pitch.Piezo.rReqAbsPos := lrActPos;
		ELSE
			Pitch.Piezo.rReqAbsPos := lrCurrentSetpoint;
		END_IF
		rtPiezoMoveDone(CLK:=fbPiezoControl.xDone);
		IF rtPiezoMoveDone.Q THEN
			fbPiezoControl.xExecute := FALSE;
			PC_State := PCM_Done;
		END_IF
	PCM_Done:
		// Set the previously requested position here
		lrLastSetpoint := lrCurrentSetpoint;
		bLimitHit := FALSE;
		// Indicate we're done
		q_bDone	:= TRUE;
		// Move back to standby
		PC_State := PCM_Standby;
	PCM_StepperError:
		Pitch.Stepper.bReset := TRUE; // set false again in PCM_Init
		PC_State := PCM_Init; 
	PCM_PiezoError:
		PC_State := PCM_Init;
	PCM_OtherError:
		PC_State := PCM_Init;
END_CASE

bFirstPass := FALSE;

fbMotionRequest(stMotionStage:=Pitch.Stepper,
                bExecute:=bExecuteStepper,
                bReset:=bResetStepper,
                enumMotionRequest:=enumMotionRequest,
                fPos:=lrCurrentSetpoint,
                fVel:=Pitch.Stepper.fVelocity,
                fAcc:=Pitch.Stepper.fAcceleration,
                fDec:=Pitch.Stepper.fDeceleration,
                bError=>,
                sErrorMessage=>,
                bBusy=>,
                bDone=>);
fbMotionStage(stMotionStage:=Pitch.Stepper);

// Transfer to the Piezo
Pitch.Piezo.rActPos := lrActPos;

tonPiezoSettled();
tonStepperHold();
fbPiezoControl(iq_Piezo:=Pitch.Piezo,
	           Enable_Positive:=Pitch.Stepper.bLimitForwardEnable,
			   Enable_Negative:=Pitch.Stepper.bLimitBackwardEnable);]]></ST>
    </Implementation>
    <Action Name="ACT_ResetSetpoint" Id="{0b95a558-7e3a-4f95-aac8-420be385c984}">
      <Implementation>
        <ST><![CDATA[// Action to reset the Setpoint to the previous value when:
// - New setpoint outside range of soft limits
// - bHardwareEnable is FALSE
// - Limit switches are hit and new setpoint the direction of the hit switch

lrOriginalPosRequest := lrCurrentSetpoint;
Pitch.Stepper.fPosition := lrLastSetpoint;
lrCurrentSetpoint := Pitch.Stepper.fPosition;
// Only want to log one warning about a bad position request
IF lrOriginalPosRequest <> lrCurrentSetpoint THEN
	// Log a warning
	fbFormatString.sFormat := 'Pitch req OoR fb (%s), reset within limits, %f';
	fbFormatString.arg1 := F_STRING(POUName);
	fbFormatString.arg2 := F_LREAL(lrOriginalPosRequest);
	fbFormatString(sOut=>stDiag.asResults[stDiag.resultIdx.IncVal()]);
	PC_State := PCM_Standby;
END_IF]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>