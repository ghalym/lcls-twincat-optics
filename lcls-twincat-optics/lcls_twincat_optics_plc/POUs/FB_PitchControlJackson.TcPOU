<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PitchControlJackson" Id="{143b5005-3e50-4e14-8a6a-21db919333f0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PitchControlJackson
VAR_IN_OUT
    Pitch : HOMS_PitchMechanism;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    lrActPos : LREAL; // Actual Position of piezo mechanism
    ftLimitSwitch : F_TRIG;
	PC_State : E_PitchControl := PCM_Init;
	rLastSetpoint : REAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* HOMS Pitch Control
A. Wallace
J. Sheppard - Updating to new lcls-twincat-motion API

The HOMS Pitch mechanism consists of a stepper and piezo that work together to adjust
the pitch of the mirror assembly.

Pitch control state machine

If the target position is beyond the range of the piezo mechanism,
execute a coarse pitch move with the stepper. 
The target of the coarse move shall be set to the requested position. 
Once coarse motion has completed the coarse motion drive position 
correction output shall be set to zero.

Fine pitch motion with the piezo will be initiated to finish closing the loop.

The piezo mechanism can actuate ~ 180urad or 90um.

*)

lrActPos := Pitch.Stepper.stAxisStatus.fActPosition;
// If we hit a limit during a move, we need to change the setpoint
ftLimitSwitch(CLK:=Pitch.Stepper.bLimitForwardEnable AND Pitch.Stepper.bLimitBackwardEnable);

// Left out Manual Mode Switch and Tweak FBs

// State Machine
CASE PC_State OF
	PCM_Init:
		// Reset the stepper
		Pitch.Stepper.bReset := TRUE;
		PC_State := PCM_Standby;
	PCM_Standby:
		// Waits for move requests and determines if they are valid
		IF (rLastSetpoint <> Pitch.Stepper.fPosition) THEN
			// Check if within range of limits
			IF 	Pitch.Stepper.fPosition > Pitch.ReqPosLimHi OR Pitch.Stepper.fPosition < Pitch.ReqPosLimLo THEN
				
			END_IF
		END_IF
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>